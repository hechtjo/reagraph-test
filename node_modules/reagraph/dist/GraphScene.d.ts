import { FC, ReactNode, Ref } from 'react';
import { LayoutOverrides, LayoutTypes } from './layout';
import { NodeContextMenuProps, ContextMenuEvent, GraphEdge, GraphNode, InternalGraphEdge, InternalGraphNode, NodeRenderer, CollapseProps } from './types';
import { SizingType } from './sizing';
import { ClusterEventArgs, EdgeArrowPosition, EdgeInterpolation, EdgeLabelPosition } from './symbols';
import { LabelVisibilityType } from './utils';
import { Theme } from './themes';
import Graph from 'graphology';
export interface GraphSceneProps {
    /**
     * Theme to use for the graph.
     */
    theme: Theme;
    /**
     * Type of layout.
     */
    layoutType?: LayoutTypes;
    /**
     * List of ids that are selected.
     */
    selections?: string[];
    /**
     * List of ids that are active.
     */
    actives?: string[];
    /**
     * List of node ids that are collapsed.
     */
    collapsedNodeIds?: string[];
    /**
     * Animate or not the graph positions.
     */
    animated?: boolean;
    /**
     * Nodes to pass to the graph.
     */
    nodes: GraphNode[];
    /**
     * Edges to pass to the graph.
     */
    edges: GraphEdge[];
    /**
     * Context menu element.
     */
    contextMenu?: (event: ContextMenuEvent) => ReactNode;
    /**
     * Type of sizing for nodes.
     */
    sizingType?: SizingType;
    /**
     * Type of visibility for labels.
     */
    labelType?: LabelVisibilityType;
    /**
     * Place of visibility for edge labels.
     */
    edgeLabelPosition?: EdgeLabelPosition;
    /**
     * Placement of edge arrows.
     */
    edgeArrowPosition?: EdgeArrowPosition;
    /**
     * Shape of edge.
     */
    edgeInterpolation?: EdgeInterpolation;
    /**
     * Font of label, same as troika-three-text
     * The URL of a custom font file to be used. Supported font formats are: * .ttf * .otf * .woff (.woff2 is not supported)
     * Default: The Roboto font loaded from Google Fonts CDN
     */
    labelFontUrl?: string;
    /**
     * Attribute based sizing property.
     */
    sizingAttribute?: string;
    /**
     * The default size to size nodes to. Default is 7.
     */
    defaultNodeSize?: number;
    /**
     * When using sizing attributes, the min size a node can be.
     */
    minNodeSize?: number;
    /**
     * When using sizing attributes, the max size a node can be.
     */
    maxNodeSize?: number;
    /**
     * Attribute used for clustering.
     */
    clusterAttribute?: string;
    /**
     * Disable interactions or not.
     */
    disabled?: boolean;
    /**
     * Allow dragging of nodes.
     */
    draggable?: boolean;
    /**
     * Render a custom node
     */
    renderNode?: NodeRenderer;
    /**
     * Advanced overrides for the layout.
     */
    layoutOverrides?: LayoutOverrides;
    /**
     * When a node was clicked.
     */
    onNodeClick?: (node: InternalGraphNode, props?: CollapseProps) => void;
    /**
     * When a node was double clicked.
     */
    onNodeDoubleClick?: (node: InternalGraphNode) => void;
    /**
     * When a node context menu happened.
     */
    onNodeContextMenu?: (node: InternalGraphNode, props?: NodeContextMenuProps) => void;
    /**
     * When node got a pointer over.
     */
    onNodePointerOver?: (node: InternalGraphNode) => void;
    /**
     * When node lost pointer over.
     */
    onNodePointerOut?: (node: InternalGraphNode) => void;
    /**
     * Triggered after a node was dragged.
     */
    onNodeDragged?: (node: InternalGraphNode) => void;
    /**
     * When a edge context menu happened.
     */
    onEdgeContextMenu?: (edge?: InternalGraphEdge) => void;
    /**
     * When an edge was clicked.
     */
    onEdgeClick?: (edge: InternalGraphEdge) => void;
    /**
     * When edge got a pointer over.
     */
    onEdgePointerOver?: (edge: InternalGraphEdge) => void;
    /**
     * When edge lost pointer over.
     */
    onEdgePointerOut?: (edge: InternalGraphEdge) => void;
    /**
     * When a cluster was clicked.
     */
    onClusterClick?: (cluster: ClusterEventArgs) => void;
    /**
     * When a cluster recieves a pointer over event.
     */
    onClusterPointerOver?: (cluster: ClusterEventArgs) => void;
    /**
     * When cluster recieves a pointer leave event.
     */
    onClusterPointerOut?: (cluster: ClusterEventArgs) => void;
}
export interface GraphSceneRef {
    /**
     * Reference to the graph object.
     */
    graph: Graph;
    /**
     * Center the graph on a node or list of nodes.
     */
    centerGraph: (ids?: string[]) => void;
}
export declare const GraphScene: FC<GraphSceneProps & {
    ref?: Ref<GraphSceneRef>;
}>;
